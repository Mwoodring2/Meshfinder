{
  "project": {
    "name": "ModelFinder",
    "description": "3D ML Archive - A powerful 3D model indexing and search system using machine learning",
    "version": "1.0.0",
    "type": "Python 3D Model Management System",
    "platform": "Windows 10/11 with PowerShell support"
  },
  "project_structure": {
    "root_directory": "E:\\File storage for 3d printing\\woodring_print_files\\Meshfinder",
    "directories": {
      "data": {
        "purpose": "3D assets & outputs",
        "subdirectories": {
          "raw": "Original STL, OBJ, ZTL, FBX files",
          "glb": "Normalized GLB exports",
          "posters": "Preview renders (PNG/JPG)",
          "metrics": "JSON/CSV of computed mesh stats"
        }
      },
      "db": {
        "purpose": "Index storage",
        "files": {
          "modelfinder.db": "SQLite database (created on first run)",
          "faiss.index": "FAISS similarity index (created on first run)"
        }
      },
      "src": {
        "purpose": "Source code",
        "subdirectories": {
          "indexer": "Scanning + metrics + converters",
          "embedder": "Embedding + FAISS integration (future)",
          "qa": "Repair + validation utilities (future)",
          "ui": "PyQt UI files (future)",
          "utils": "Shared helpers (logging, config)"
        }
      },
      "scripts": {
        "purpose": "CLI utilities, build scripts",
        "files": [
          "build_exe.bat",
          "build_run.ps1",
          "scan_folder.py",
          "search_cli.py"
        ]
      },
      "tests": {
        "purpose": "Unit tests + sample assets (future)"
      },
      "docs": {
        "purpose": "Documentation",
        "files": [
          "roadmap.md",
          "architecture.md",
          "setup_guide.md"
        ]
      }
    }
  },
  "core_files": {
    "README.md": {
      "purpose": "Project overview & quickstart",
      "features": [
        "Complete project description",
        "Quick start guide",
        "Usage examples",
        "Feature list",
        "Supported file formats table",
        "Roadmap phases",
        "Contributing guidelines"
      ]
    },
    "requirements.txt": {
      "purpose": "Python dependencies",
      "categories": {
        "core_3d_processing": [
          "trimesh>=3.23.0",
          "pygltflib>=1.16.0",
          "assimp>=5.2.0"
        ],
        "database_search": [
          "sqlite3",
          "faiss-cpu>=1.7.4",
          "numpy>=1.24.0"
        ],
        "image_processing": [
          "Pillow>=10.0.0",
          "opencv-python>=4.8.0",
          "matplotlib>=3.7.0"
        ],
        "machine_learning": [
          "scikit-learn>=1.3.0",
          "torch>=2.0.0",
          "transformers>=4.30.0"
        ],
        "gui_desktop": [
          "PyQt6>=6.5.0",
          "PyQt6-tools>=6.5.0"
        ],
        "utilities": [
          "tqdm>=4.65.0",
          "click>=8.1.0",
          "python-dotenv>=1.0.0",
          "loguru>=0.7.0"
        ],
        "development": [
          "pytest>=7.4.0",
          "pytest-cov>=4.1.0",
          "black>=23.0.0",
          "flake8>=6.0.0"
        ],
        "build_distribution": [
          "pyinstaller>=5.13.0",
          "setuptools>=68.0.0",
          "wheel>=0.41.0"
        ]
      }
    },
    ".gitignore": {
      "purpose": "Git hygiene",
      "patterns": [
        "Python artifacts (__pycache__, *.pyc, etc.)",
        "Virtual environment (.venv/)",
        "Build artifacts (build/, dist/, *.spec)",
        "Logs (*.log)",
        "OS files (.DS_Store, Thumbs.db)",
        "Project outputs (db/*.db, data/glb/, data/posters/, data/metrics/)"
      ]
    }
  },
  "cli_tools": {
    "scan_folder.py": {
      "purpose": "3D Model Scanner",
      "features": [
        "Multi-format support (STL, OBJ, FBX, GLB, PLY, 3DS, DAE, etc.)",
        "Recursive folder traversal",
        "Geometry analysis (vertices, faces, volume, surface area)",
        "Metadata extraction (bounding box, watertight status)",
        "SQLite database integration with assets and embeddings tables",
        "Progress bars and verbose output",
        "Command-line arguments for customization",
        "Placeholder embedding generation (10D random vectors)"
      ],
      "database_schema": {
        "assets_table": {
          "id": "INTEGER PRIMARY KEY AUTOINCREMENT",
          "path": "TEXT UNIQUE NOT NULL",
          "filename": "TEXT NOT NULL",
          "ext": "TEXT",
          "file_size": "INTEGER",
          "tri_count": "INTEGER",
          "bbox_x": "REAL",
          "bbox_y": "REAL", 
          "bbox_z": "REAL",
          "is_watertight": "BOOLEAN",
          "volume": "REAL",
          "surface_area": "REAL",
          "created_at": "TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
          "updated_at": "TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
        },
        "embeddings_table": {
          "id": "INTEGER PRIMARY KEY AUTOINCREMENT",
          "asset_id": "INTEGER NOT NULL",
          "dim": "INTEGER NOT NULL",
          "vec": "BLOB NOT NULL",
          "created_at": "TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
          "foreign_key": "FOREIGN KEY (asset_id) REFERENCES assets (id) ON DELETE CASCADE"
        }
      },
      "usage_examples": [
        "python scripts/scan_folder.py \"C:\\My3DModels\"",
        "python scripts/scan_folder.py \"C:\\My3DModels\" --extensions .stl .obj",
        "python scripts/scan_folder.py \"C:\\My3DModels\" --verbose"
      ]
    },
    "search_cli.py": {
      "purpose": "FAISS Vector Similarity Search",
      "features": [
        "FAISS integration for high-performance vector similarity search",
        "Cosine similarity using normalized L2 vectors",
        "Multiple query types (like-id, like-path, manual vector)",
        "Advanced filtering (extension, triangle count, watertight status)",
        "Rich formatted output with scores and metadata",
        "Top-K results with configurable limits"
      ],
      "query_types": {
        "like_id": "Find items similar to specific asset ID",
        "like_path": "Find items similar to specific file path",
        "vec": "Manual vector input for advanced users"
      },
      "filters": {
        "ext": "Filter by file extension (.obj, .stl, etc.)",
        "max_tris": "Filter by triangle count upper bound",
        "watertight": "Filter by watertight flag (true/false)"
      },
      "usage_examples": [
        "python scripts/search_cli.py --like-path \"C:\\Models\\dragon.stl\"",
        "python scripts/search_cli.py --like-id 5 --ext .stl --max-tris 10000",
        "python scripts/search_cli.py --vec \"0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0\"",
        "python scripts/search_cli.py --like-id 5 --watertight true --topk 20"
      ]
    },
    "modelfinder_indexer.py": {
      "purpose": "Main Entry Point - Unified Application",
      "features": [
        "Unified command interface for both scan and search",
        "Command routing to appropriate modules",
        "Comprehensive help system",
        "Error handling and user feedback",
        "Single executable entry point"
      ],
      "commands": {
        "scan": "Route to scan_folder.py functionality",
        "search": "Route to search_cli.py functionality",
        "help": "Show comprehensive help information"
      },
      "usage_examples": [
        "python src/indexer/modelfinder_indexer.py scan C:\\My3DModels",
        "python src/indexer/modelfinder_indexer.py search dragon",
        "python src/indexer/modelfinder_indexer.py help"
      ]
    }
  },
  "build_system": {
    "build_exe.bat": {
      "purpose": "Windows Executable Builder",
      "features": [
        "Virtual environment management (.venv)",
        "Automatic dependency installation",
        "Multiple executable creation",
        "PyInstaller integration",
        "Clean build process"
      ],
      "executables_created": {
        "ModelFinder_Indexer.exe": "Main unified application",
        "ModelFinder_Scanner.exe": "Dedicated scanning tool", 
        "ModelFinder_Searcher.exe": "Dedicated search tool"
      },
      "build_process": [
        "Create virtual environment if needed",
        "Install requirements and PyInstaller",
        "Build main indexer executable",
        "Build scanner executable",
        "Build searcher executable",
        "Output to dist/ directory"
      ]
    }
  },
  "source_code_modules": {
    "src/utils/config.py": {
      "purpose": "Configuration Management",
      "features": [
        "Centralized configuration system",
        "JSON-based config files",
        "Default configuration values",
        "Dot notation access (e.g., 'database.path')",
        "Configurable settings for scanning, conversion, search, logging"
      ],
      "config_sections": {
        "database": "Database path, backup settings",
        "scanning": "Supported extensions, file size limits, parallel workers",
        "conversion": "Output format, normalization, preview generation",
        "search": "Default limits, similarity thresholds",
        "logging": "Level, format, file output"
      }
    },
    "src/utils/logger.py": {
      "purpose": "Logging System",
      "features": [
        "Centralized logging configuration",
        "Console and file output",
        "Configurable log levels",
        "Consistent formatting",
        "Easy logger creation"
      ]
    }
  },
  "documentation": {
    "docs/setup_guide.md": {
      "purpose": "Installation and Setup Guide",
      "sections": [
        "Prerequisites and system requirements",
        "Python installation instructions",
        "Dependency installation steps",
        "Verification procedures",
        "Quick start examples",
        "Configuration options",
        "Troubleshooting common issues",
        "Performance tips",
        "Advanced usage examples"
      ]
    },
    "docs/architecture.md": {
      "purpose": "System Architecture Overview",
      "sections": [
        "System overview and components",
        "Architecture diagram",
        "Data layer (SQLite, FAISS, file system)",
        "Core services (indexer, embedder, QA)",
        "Application layer (search engine, management)",
        "User interface (CLI tools, future PyQt UI)",
        "Data flow diagrams",
        "Technology stack",
        "Performance considerations",
        "Security considerations",
        "Extensibility design",
        "Deployment options"
      ]
    },
    "docs/roadmap.md": {
      "purpose": "Development Roadmap",
      "phases": {
        "phase_1_foundation": {
          "status": "Current",
          "features": [
            "Basic scanning and indexing",
            "CLI tools",
            "Database schema",
            "Multi-format support",
            "Configuration system"
          ]
        },
        "phase_2_intelligence": {
          "status": "Next 3-6 months",
          "features": [
            "FAISS integration",
            "ML-powered similarity search",
            "PyQt desktop UI",
            "Advanced search features"
          ]
        },
        "phase_3_advanced": {
          "status": "6-12 months",
          "features": [
            "Web interface",
            "Cloud integration",
            "AI-powered features",
            "Advanced analytics"
          ]
        },
        "phase_4_ecosystem": {
          "status": "12+ months",
          "features": [
            "CAD software integration",
            "Community features",
            "Enterprise features"
          ]
        }
      }
    }
  },
  "supported_formats": {
    "fully_supported": [
      ".stl (ASCII & Binary)",
      ".obj (With materials)",
      ".fbx (Autodesk format)",
      ".glb (glTF binary)",
      ".ply (Stanford format)"
    ],
    "partially_supported": [
      ".3ds (3D Studio)",
      ".dae (Collada)"
    ],
    "future_support": [
      ".blend (Blender)",
      ".max (3ds Max)",
      ".ma/.mb (Maya)",
      ".ztl (ZBrush)",
      ".3mf (3D Manufacturing Format)"
    ]
  },
  "key_features": {
    "scanning": [
      "Multi-format 3D file support",
      "Recursive folder traversal",
      "Automatic geometry analysis",
      "Metadata extraction",
      "Progress tracking",
      "Error handling and recovery"
    ],
    "searching": [
      "FAISS vector similarity search",
      "Cosine similarity matching",
      "Multiple query types",
      "Advanced filtering options",
      "Rich result formatting",
      "Configurable result limits"
    ],
    "database": [
      "SQLite for metadata storage",
      "FAISS for vector operations",
      "Proper indexing for performance",
      "Foreign key relationships",
      "ACID compliance"
    ],
    "build_system": [
      "Virtual environment management",
      "Multiple executable creation",
      "PyInstaller integration",
      "Clean build process",
      "Cross-platform compatibility"
    ]
  },
  "usage_workflow": {
    "step_1_installation": [
      "Install Python 3.8+",
      "Clone/download project",
      "Install dependencies: pip install -r requirements.txt"
    ],
    "step_2_scanning": [
      "Run scanner: python scripts/scan_folder.py \"C:\\My3DModels\"",
      "Database and embeddings created automatically",
      "Models indexed with metadata and placeholder vectors"
    ],
    "step_3_searching": [
      "Search by similarity: python scripts/search_cli.py --like-path \"model.stl\"",
      "Filter results: python scripts/search_cli.py --like-id 5 --ext .stl",
      "View statistics: python scripts/search_cli.py --stats"
    ],
    "step_4_building": [
      "Create executables: scripts\\build_exe.bat",
      "Distribute: dist\\ModelFinder_Indexer.exe",
      "Use standalone tools without Python installation"
    ]
  },
  "technical_specifications": {
    "python_version": "3.8+",
    "platform": "Windows 10/11",
    "dependencies": "45+ Python packages",
    "database": "SQLite 3",
    "vector_search": "FAISS (Facebook AI Similarity Search)",
    "3d_processing": "Trimesh, PyGLTF, Assimp",
    "ml_libraries": "NumPy, Scikit-learn, PyTorch",
    "gui_framework": "PyQt6 (future)",
    "build_tool": "PyInstaller"
  },
  "file_sizes_and_counts": {
    "total_files": 15,
    "python_files": 8,
    "documentation_files": 4,
    "configuration_files": 3,
    "estimated_total_size": "~50KB (excluding dependencies)",
    "dependencies_size": "~500MB (when installed)"
  },
  "status": {
    "project_completion": "Phase 1 - Foundation Complete",
    "ready_for_use": true,
    "next_development_phase": "Phase 2 - Intelligence (ML Integration)",
    "immediate_next_steps": [
      "Test scanning functionality",
      "Test search functionality", 
      "Build executables",
      "Integrate real ML embeddings"
    ]
  }
}














